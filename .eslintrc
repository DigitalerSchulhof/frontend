{
  "root": true,
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "plugin:@typescript-eslint/strict",
    "plugin:prettier/recommended"
  ],
  "parserOptions": {
    "project": true
  },
  "parser": "@typescript-eslint/parser",
  "rules": {
    "prettier/prettier": "error",
    // I know what I'm doing
    "@typescript-eslint/no-non-null-assertion": "off",
    "@typescript-eslint/require-await": "off",
    "@typescript-eslint/no-invalid-void-type": "off",
    "@typescript-eslint/consistent-type-definitions": "off",

    // Mostly handled by TS warnings
    "@typescript-eslint/no-unsafe-assignment": "off",
    "@typescript-eslint/no-unsafe-call": "off",
    "@typescript-eslint/no-unsafe-argument": "off",
    "@typescript-eslint/no-unsafe-member-access": "off",

    // Covered by @typescript-eslint/no-explicit-any
    "@typescript-eslint/no-unsafe-return": "off",
    // There is no difference between interface/type in these cases, and the one I choose expresses what I want better
    "@typescript-eslint/no-empty-interface": "off",

    "@typescript-eslint/no-unused-vars": [
      "warn",
      {
        "argsIgnorePattern": "^_"
      }
    ],

    "@typescript-eslint/prefer-literal-enum-member": ["error", {
      "allowBitwiseExpressions": true
    }],

    // Want these
    "@typescript-eslint/explicit-module-boundary-types": "warn",
    "@typescript-eslint/naming-convention": "warn",
    "@typescript-eslint/switch-exhaustiveness-check": "warn",
    "@typescript-eslint/consistent-type-imports": "error",
    "@typescript-eslint/no-shadow": "error",
    "prefer-template": "error"
  },
  "overrides": [
    {
      "files": ["**/__tests__/**/*.ts", "__tests__/**/*.tsx"],
      "rules": {
        "@typescript-eslint/no-explicit-any": "off"
      }
    },
    {
      "files": ["./src/**/*.ts?(x)"],
      "extends": [
        "plugin:jsx-a11y/recommended",
        "next",
        "plugin:prettier/recommended"
      ],
      "rules": {
        // This doesn't work with memoized callbacks
        "@typescript-eslint/no-misused-promises": [
          "error",
          {
            "checksVoidReturn": {
              "attributes": false
            }
          }
        ],
        "react/self-closing-comp": "error",

        // Server actions are referred to by their path
        "import/no-anonymous-default-export": "off",

        // Make no sense with React components
        "@typescript-eslint/explicit-module-boundary-types": "off",
        "@typescript-eslint/naming-convention": "off"
      }
    }
  ]
}
