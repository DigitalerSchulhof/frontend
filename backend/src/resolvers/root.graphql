schema {
  query: RootQuery
  mutation: RootMutation
}

type RootQuery {
  _: Boolean
}

type RootMutation {
  _: Boolean
}

# Misc

enum Gender {
  Male
  Female
  Other
}

input GenderFilter {
  eq: Gender
  ne: Gender
  in: [Gender!]
  nin: [Gender!]
}

# Pagination

enum SortDirection {
  ASC
  DESC
}

type PageInfo {
# TODO

#  hasNextPage: Boolean!
#  hasPreviousPage: Boolean!
#  nextPageOffset: Int
#  previousPageOffset: Int
#  totalPages: Int!

  totalResults: Int!
}

# Filters

input StringFilter {
  eq: String
  ne: String
  in: [String!]
  nin: [String!]
}

input IntFilter {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int!]
  nin: [Int!]
}

input FloatFilter {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  nin: [Float!]
}

input BooleanFilter {
  eq: Boolean
  ne: Boolean
}

input IDFilter {
  eq: ID
  ne: ID
  in: [ID!]
  nin: [ID!]
}

input DateFilter {
  eq: Date
  ne: Date
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  in: [Date!]
  nin: [Date!]
}

# Inputs

input StringInput {
  value: String
}

input NonNullStringInput {
  value: String!
}

input IntInput {
  value: Int
}

input NonNullIntInput {
  value: Int!
}

input FloatInput {
  value: Float
}

input NonNullFloatInput {
  value: Float!
}

input BooleanInput {
  value: Boolean
}

input NonNullBooleanInput {
  value: Boolean!
}

input IDInput {
  value: ID
}

input NonNullIDInput {
  value: ID!
}

input DateInput {
  value: Date
}

input NonNullDateInput {
  value: Date!
}
